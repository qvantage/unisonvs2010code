'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class InvoiceDetailsDS
    Inherits DataSet
    
    Private tableInvoiceDetailsView As InvoiceDetailsViewDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("InvoiceDetailsView")) Is Nothing) Then
                Me.Tables.Add(New InvoiceDetailsViewDataTable(ds.Tables("InvoiceDetailsView")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InvoiceDetailsView As InvoiceDetailsViewDataTable
        Get
            Return Me.tableInvoiceDetailsView
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As InvoiceDetailsDS = CType(MyBase.Clone,InvoiceDetailsDS)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("InvoiceDetailsView")) Is Nothing) Then
            Me.Tables.Add(New InvoiceDetailsViewDataTable(ds.Tables("InvoiceDetailsView")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableInvoiceDetailsView = CType(Me.Tables("InvoiceDetailsView"),InvoiceDetailsViewDataTable)
        If (Not (Me.tableInvoiceDetailsView) Is Nothing) Then
            Me.tableInvoiceDetailsView.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "InvoiceDetailsDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InvoiceDetailsDS.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableInvoiceDetailsView = New InvoiceDetailsViewDataTable
        Me.Tables.Add(Me.tableInvoiceDetailsView)
    End Sub
    
    Private Function ShouldSerializeInvoiceDetailsView() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub InvoiceDetailsViewRowChangeEventHandler(ByVal sender As Object, ByVal e As InvoiceDetailsViewRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InvoiceDetailsViewDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvoice_No As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnInvoice_Date As DataColumn
        
        Private columnClosing_Date As DataColumn
        
        Private columnDue_Date As DataColumn
        
        Private columnTotal_Amount As DataColumn
        
        Private columnLineNum As DataColumn
        
        Private columnTranDate As DataColumn
        
        Private columnCharge_Code As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnUnitPrice As DataColumn
        
        Private columnPrefix As DataColumn
        
        Private columnQty As DataColumn
        
        Private columnSuffix As DataColumn
        
        Private columnUnit As DataColumn
        
        Private columnCharge As DataColumn
        
        Private columnTax As DataColumn
        
        Private columnPlanID As DataColumn
        
        Private columnMftRowID As DataColumn
        
        Private columnMISCRowID As DataColumn
        
        Private columnTrackingNum As DataColumn
        
        Private columnRefNum As DataColumn
        
        Private columnFromAddID As DataColumn
        
        Private columnFromCustID As DataColumn
        
        Private columnFromCustName As DataColumn
        
        Private columnFromLocID As DataColumn
        
        Private columnFromLocName As DataColumn
        
        Private columnFromAdd1 As DataColumn
        
        Private columnFromAdd2 As DataColumn
        
        Private columnFromCity As DataColumn
        
        Private columnFromState As DataColumn
        
        Private columnFromZip As DataColumn
        
        Private columnFromContact As DataColumn
        
        Private columnFromPhone As DataColumn
        
        Private columnFromEmail As DataColumn
        
        Private columnToAddID As DataColumn
        
        Private columnToCustID As DataColumn
        
        Private columnToCustName As DataColumn
        
        Private columnToLocID As DataColumn
        
        Private columnToLocName As DataColumn
        
        Private columnToAdd1 As DataColumn
        
        Private columnToAdd2 As DataColumn
        
        Private columnToCity As DataColumn
        
        Private columnToState As DataColumn
        
        Private columnToZip As DataColumn
        
        Private columnToContact As DataColumn
        
        Private columnToPhone As DataColumn
        
        Private columnToEmail As DataColumn
        
        Private columnWeight As DataColumn
        
        Private columnPieces As DataColumn
        
        Private columnSentBy As DataColumn
        
        Private columnParcelType As DataColumn
        
        Private columnServiceLevel As DataColumn
        
        Private columnSpecialHandle As DataColumn
        
        Private columnBillType As DataColumn
        
        Private columnBillNum As DataColumn
        
        Private columnDateTime As DataColumn
        
        Private columnRowID As DataColumn
        
        Private columnVOID As DataColumn
        
        Private columngToLocID As DataColumn
        
        Private columngToLocName As DataColumn
        
        Private columngToAdd1 As DataColumn
        
        Private columngToAdd2 As DataColumn
        
        Private columngToCity As DataColumn
        
        Private columngToState As DataColumn
        
        Private columngToZip As DataColumn
        
        Private columngToPhone As DataColumn
        
        Private columngToAddID As DataColumn
        
        Private columngToCustID As DataColumn
        
        Private columngDLOfficeID As DataColumn
        
        Private columngDLOffice As DataColumn
        
        Private columnDLOfficeID As DataColumn
        
        Private columnDLOffice As DataColumn
        
        Friend Sub New()
            MyBase.New("InvoiceDetailsView")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_NoColumn As DataColumn
            Get
                Return Me.columnInvoice_No
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_DateColumn As DataColumn
            Get
                Return Me.columnInvoice_Date
            End Get
        End Property
        
        Friend ReadOnly Property Closing_DateColumn As DataColumn
            Get
                Return Me.columnClosing_Date
            End Get
        End Property
        
        Friend ReadOnly Property Due_DateColumn As DataColumn
            Get
                Return Me.columnDue_Date
            End Get
        End Property
        
        Friend ReadOnly Property Total_AmountColumn As DataColumn
            Get
                Return Me.columnTotal_Amount
            End Get
        End Property
        
        Friend ReadOnly Property LineNumColumn As DataColumn
            Get
                Return Me.columnLineNum
            End Get
        End Property
        
        Friend ReadOnly Property TranDateColumn As DataColumn
            Get
                Return Me.columnTranDate
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CodeColumn As DataColumn
            Get
                Return Me.columnCharge_Code
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn As DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Friend ReadOnly Property PrefixColumn As DataColumn
            Get
                Return Me.columnPrefix
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Friend ReadOnly Property SuffixColumn As DataColumn
            Get
                Return Me.columnSuffix
            End Get
        End Property
        
        Friend ReadOnly Property UnitColumn As DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        Friend ReadOnly Property ChargeColumn As DataColumn
            Get
                Return Me.columnCharge
            End Get
        End Property
        
        Friend ReadOnly Property TaxColumn As DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        Friend ReadOnly Property PlanIDColumn As DataColumn
            Get
                Return Me.columnPlanID
            End Get
        End Property
        
        Friend ReadOnly Property MftRowIDColumn As DataColumn
            Get
                Return Me.columnMftRowID
            End Get
        End Property
        
        Friend ReadOnly Property MISCRowIDColumn As DataColumn
            Get
                Return Me.columnMISCRowID
            End Get
        End Property
        
        Friend ReadOnly Property TrackingNumColumn As DataColumn
            Get
                Return Me.columnTrackingNum
            End Get
        End Property
        
        Friend ReadOnly Property RefNumColumn As DataColumn
            Get
                Return Me.columnRefNum
            End Get
        End Property
        
        Friend ReadOnly Property FromAddIDColumn As DataColumn
            Get
                Return Me.columnFromAddID
            End Get
        End Property
        
        Friend ReadOnly Property FromCustIDColumn As DataColumn
            Get
                Return Me.columnFromCustID
            End Get
        End Property
        
        Friend ReadOnly Property FromCustNameColumn As DataColumn
            Get
                Return Me.columnFromCustName
            End Get
        End Property
        
        Friend ReadOnly Property FromLocIDColumn As DataColumn
            Get
                Return Me.columnFromLocID
            End Get
        End Property
        
        Friend ReadOnly Property FromLocNameColumn As DataColumn
            Get
                Return Me.columnFromLocName
            End Get
        End Property
        
        Friend ReadOnly Property FromAdd1Column As DataColumn
            Get
                Return Me.columnFromAdd1
            End Get
        End Property
        
        Friend ReadOnly Property FromAdd2Column As DataColumn
            Get
                Return Me.columnFromAdd2
            End Get
        End Property
        
        Friend ReadOnly Property FromCityColumn As DataColumn
            Get
                Return Me.columnFromCity
            End Get
        End Property
        
        Friend ReadOnly Property FromStateColumn As DataColumn
            Get
                Return Me.columnFromState
            End Get
        End Property
        
        Friend ReadOnly Property FromZipColumn As DataColumn
            Get
                Return Me.columnFromZip
            End Get
        End Property
        
        Friend ReadOnly Property FromContactColumn As DataColumn
            Get
                Return Me.columnFromContact
            End Get
        End Property
        
        Friend ReadOnly Property FromPhoneColumn As DataColumn
            Get
                Return Me.columnFromPhone
            End Get
        End Property
        
        Friend ReadOnly Property FromEmailColumn As DataColumn
            Get
                Return Me.columnFromEmail
            End Get
        End Property
        
        Friend ReadOnly Property ToAddIDColumn As DataColumn
            Get
                Return Me.columnToAddID
            End Get
        End Property
        
        Friend ReadOnly Property ToCustIDColumn As DataColumn
            Get
                Return Me.columnToCustID
            End Get
        End Property
        
        Friend ReadOnly Property ToCustNameColumn As DataColumn
            Get
                Return Me.columnToCustName
            End Get
        End Property
        
        Friend ReadOnly Property ToLocIDColumn As DataColumn
            Get
                Return Me.columnToLocID
            End Get
        End Property
        
        Friend ReadOnly Property ToLocNameColumn As DataColumn
            Get
                Return Me.columnToLocName
            End Get
        End Property
        
        Friend ReadOnly Property ToAdd1Column As DataColumn
            Get
                Return Me.columnToAdd1
            End Get
        End Property
        
        Friend ReadOnly Property ToAdd2Column As DataColumn
            Get
                Return Me.columnToAdd2
            End Get
        End Property
        
        Friend ReadOnly Property ToCityColumn As DataColumn
            Get
                Return Me.columnToCity
            End Get
        End Property
        
        Friend ReadOnly Property ToStateColumn As DataColumn
            Get
                Return Me.columnToState
            End Get
        End Property
        
        Friend ReadOnly Property ToZipColumn As DataColumn
            Get
                Return Me.columnToZip
            End Get
        End Property
        
        Friend ReadOnly Property ToContactColumn As DataColumn
            Get
                Return Me.columnToContact
            End Get
        End Property
        
        Friend ReadOnly Property ToPhoneColumn As DataColumn
            Get
                Return Me.columnToPhone
            End Get
        End Property
        
        Friend ReadOnly Property ToEmailColumn As DataColumn
            Get
                Return Me.columnToEmail
            End Get
        End Property
        
        Friend ReadOnly Property WeightColumn As DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        Friend ReadOnly Property PiecesColumn As DataColumn
            Get
                Return Me.columnPieces
            End Get
        End Property
        
        Friend ReadOnly Property SentByColumn As DataColumn
            Get
                Return Me.columnSentBy
            End Get
        End Property
        
        Friend ReadOnly Property ParcelTypeColumn As DataColumn
            Get
                Return Me.columnParcelType
            End Get
        End Property
        
        Friend ReadOnly Property ServiceLevelColumn As DataColumn
            Get
                Return Me.columnServiceLevel
            End Get
        End Property
        
        Friend ReadOnly Property SpecialHandleColumn As DataColumn
            Get
                Return Me.columnSpecialHandle
            End Get
        End Property
        
        Friend ReadOnly Property BillTypeColumn As DataColumn
            Get
                Return Me.columnBillType
            End Get
        End Property
        
        Friend ReadOnly Property BillNumColumn As DataColumn
            Get
                Return Me.columnBillNum
            End Get
        End Property
        
        Friend ReadOnly Property DateTimeColumn As DataColumn
            Get
                Return Me.columnDateTime
            End Get
        End Property
        
        Friend ReadOnly Property RowIDColumn As DataColumn
            Get
                Return Me.columnRowID
            End Get
        End Property
        
        Friend ReadOnly Property VOIDColumn As DataColumn
            Get
                Return Me.columnVOID
            End Get
        End Property
        
        Friend ReadOnly Property gToLocIDColumn As DataColumn
            Get
                Return Me.columngToLocID
            End Get
        End Property
        
        Friend ReadOnly Property gToLocNameColumn As DataColumn
            Get
                Return Me.columngToLocName
            End Get
        End Property
        
        Friend ReadOnly Property gToAdd1Column As DataColumn
            Get
                Return Me.columngToAdd1
            End Get
        End Property
        
        Friend ReadOnly Property gToAdd2Column As DataColumn
            Get
                Return Me.columngToAdd2
            End Get
        End Property
        
        Friend ReadOnly Property gToCityColumn As DataColumn
            Get
                Return Me.columngToCity
            End Get
        End Property
        
        Friend ReadOnly Property gToStateColumn As DataColumn
            Get
                Return Me.columngToState
            End Get
        End Property
        
        Friend ReadOnly Property gToZipColumn As DataColumn
            Get
                Return Me.columngToZip
            End Get
        End Property
        
        Friend ReadOnly Property gToPhoneColumn As DataColumn
            Get
                Return Me.columngToPhone
            End Get
        End Property
        
        Friend ReadOnly Property gToAddIDColumn As DataColumn
            Get
                Return Me.columngToAddID
            End Get
        End Property
        
        Friend ReadOnly Property gToCustIDColumn As DataColumn
            Get
                Return Me.columngToCustID
            End Get
        End Property
        
        Friend ReadOnly Property gDLOfficeIDColumn As DataColumn
            Get
                Return Me.columngDLOfficeID
            End Get
        End Property
        
        Friend ReadOnly Property gDLOfficeColumn As DataColumn
            Get
                Return Me.columngDLOffice
            End Get
        End Property
        
        Friend ReadOnly Property DLOfficeIDColumn As DataColumn
            Get
                Return Me.columnDLOfficeID
            End Get
        End Property
        
        Friend ReadOnly Property DLOfficeColumn As DataColumn
            Get
                Return Me.columnDLOffice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InvoiceDetailsViewRow
            Get
                Return CType(Me.Rows(index),InvoiceDetailsViewRow)
            End Get
        End Property
        
        Public Event InvoiceDetailsViewRowChanged As InvoiceDetailsViewRowChangeEventHandler
        
        Public Event InvoiceDetailsViewRowChanging As InvoiceDetailsViewRowChangeEventHandler
        
        Public Event InvoiceDetailsViewRowDeleted As InvoiceDetailsViewRowChangeEventHandler
        
        Public Event InvoiceDetailsViewRowDeleting As InvoiceDetailsViewRowChangeEventHandler
        
        Public Overloads Sub AddInvoiceDetailsViewRow(ByVal row As InvoiceDetailsViewRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInvoiceDetailsViewRow( _
                    ByVal Invoice_No As Integer,  _
                    ByVal CustomerID As String,  _
                    ByVal Name As String,  _
                    ByVal Invoice_Date As Date,  _
                    ByVal Closing_Date As Date,  _
                    ByVal Due_Date As Date,  _
                    ByVal Total_Amount As Decimal,  _
                    ByVal LineNum As Integer,  _
                    ByVal TranDate As Date,  _
                    ByVal Charge_Code As String,  _
                    ByVal Description As String,  _
                    ByVal UnitPrice As Decimal,  _
                    ByVal Prefix As String,  _
                    ByVal Qty As Decimal,  _
                    ByVal Suffix As String,  _
                    ByVal Unit As String,  _
                    ByVal Charge As Decimal,  _
                    ByVal Tax As String,  _
                    ByVal PlanID As Integer,  _
                    ByVal MftRowID As String,  _
                    ByVal MISCRowID As Integer,  _
                    ByVal TrackingNum As String,  _
                    ByVal RefNum As String,  _
                    ByVal FromAddID As Integer,  _
                    ByVal FromCustID As String,  _
                    ByVal FromCustName As String,  _
                    ByVal FromLocID As String,  _
                    ByVal FromLocName As String,  _
                    ByVal FromAdd1 As String,  _
                    ByVal FromAdd2 As String,  _
                    ByVal FromCity As String,  _
                    ByVal FromState As String,  _
                    ByVal FromZip As String,  _
                    ByVal FromContact As String,  _
                    ByVal FromPhone As String,  _
                    ByVal FromEmail As String,  _
                    ByVal ToAddID As Integer,  _
                    ByVal ToCustID As String,  _
                    ByVal ToCustName As String,  _
                    ByVal ToLocID As String,  _
                    ByVal ToLocName As String,  _
                    ByVal ToAdd1 As String,  _
                    ByVal ToAdd2 As String,  _
                    ByVal ToCity As String,  _
                    ByVal ToState As String,  _
                    ByVal ToZip As String,  _
                    ByVal ToContact As String,  _
                    ByVal ToPhone As String,  _
                    ByVal ToEmail As String,  _
                    ByVal Weight As Decimal,  _
                    ByVal Pieces As String,  _
                    ByVal SentBy As String,  _
                    ByVal ParcelType As String,  _
                    ByVal ServiceLevel As String,  _
                    ByVal SpecialHandle As String,  _
                    ByVal BillType As String,  _
                    ByVal BillNum As String,  _
                    ByVal DateTime As Date,  _
                    ByVal RowID As String,  _
                    ByVal VOID As String,  _
                    ByVal gToLocID As String,  _
                    ByVal gToLocName As String,  _
                    ByVal gToAdd1 As String,  _
                    ByVal gToAdd2 As String,  _
                    ByVal gToCity As String,  _
                    ByVal gToState As String,  _
                    ByVal gToZip As String,  _
                    ByVal gToPhone As String,  _
                    ByVal gToAddID As Integer,  _
                    ByVal gToCustID As String,  _
                    ByVal gDLOfficeID As String,  _
                    ByVal gDLOffice As String,  _
                    ByVal DLOfficeID As String,  _
                    ByVal DLOffice As String) As InvoiceDetailsViewRow
            Dim rowInvoiceDetailsViewRow As InvoiceDetailsViewRow = CType(Me.NewRow,InvoiceDetailsViewRow)
            rowInvoiceDetailsViewRow.ItemArray = New Object() {Invoice_No, CustomerID, Name, Invoice_Date, Closing_Date, Due_Date, Total_Amount, LineNum, TranDate, Charge_Code, Description, UnitPrice, Prefix, Qty, Suffix, Unit, Charge, Tax, PlanID, MftRowID, MISCRowID, TrackingNum, RefNum, FromAddID, FromCustID, FromCustName, FromLocID, FromLocName, FromAdd1, FromAdd2, FromCity, FromState, FromZip, FromContact, FromPhone, FromEmail, ToAddID, ToCustID, ToCustName, ToLocID, ToLocName, ToAdd1, ToAdd2, ToCity, ToState, ToZip, ToContact, ToPhone, ToEmail, Weight, Pieces, SentBy, ParcelType, ServiceLevel, SpecialHandle, BillType, BillNum, DateTime, RowID, VOID, gToLocID, gToLocName, gToAdd1, gToAdd2, gToCity, gToState, gToZip, gToPhone, gToAddID, gToCustID, gDLOfficeID, gDLOffice, DLOfficeID, DLOffice}
            Me.Rows.Add(rowInvoiceDetailsViewRow)
            Return rowInvoiceDetailsViewRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InvoiceDetailsViewDataTable = CType(MyBase.Clone,InvoiceDetailsViewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InvoiceDetailsViewDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvoice_No = Me.Columns("Invoice_No")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnName = Me.Columns("Name")
            Me.columnInvoice_Date = Me.Columns("Invoice_Date")
            Me.columnClosing_Date = Me.Columns("Closing_Date")
            Me.columnDue_Date = Me.Columns("Due_Date")
            Me.columnTotal_Amount = Me.Columns("Total_Amount")
            Me.columnLineNum = Me.Columns("LineNum")
            Me.columnTranDate = Me.Columns("TranDate")
            Me.columnCharge_Code = Me.Columns("Charge_Code")
            Me.columnDescription = Me.Columns("Description")
            Me.columnUnitPrice = Me.Columns("UnitPrice")
            Me.columnPrefix = Me.Columns("Prefix")
            Me.columnQty = Me.Columns("Qty")
            Me.columnSuffix = Me.Columns("Suffix")
            Me.columnUnit = Me.Columns("Unit")
            Me.columnCharge = Me.Columns("Charge")
            Me.columnTax = Me.Columns("Tax")
            Me.columnPlanID = Me.Columns("PlanID")
            Me.columnMftRowID = Me.Columns("MftRowID")
            Me.columnMISCRowID = Me.Columns("MISCRowID")
            Me.columnTrackingNum = Me.Columns("TrackingNum")
            Me.columnRefNum = Me.Columns("RefNum")
            Me.columnFromAddID = Me.Columns("FromAddID")
            Me.columnFromCustID = Me.Columns("FromCustID")
            Me.columnFromCustName = Me.Columns("FromCustName")
            Me.columnFromLocID = Me.Columns("FromLocID")
            Me.columnFromLocName = Me.Columns("FromLocName")
            Me.columnFromAdd1 = Me.Columns("FromAdd1")
            Me.columnFromAdd2 = Me.Columns("FromAdd2")
            Me.columnFromCity = Me.Columns("FromCity")
            Me.columnFromState = Me.Columns("FromState")
            Me.columnFromZip = Me.Columns("FromZip")
            Me.columnFromContact = Me.Columns("FromContact")
            Me.columnFromPhone = Me.Columns("FromPhone")
            Me.columnFromEmail = Me.Columns("FromEmail")
            Me.columnToAddID = Me.Columns("ToAddID")
            Me.columnToCustID = Me.Columns("ToCustID")
            Me.columnToCustName = Me.Columns("ToCustName")
            Me.columnToLocID = Me.Columns("ToLocID")
            Me.columnToLocName = Me.Columns("ToLocName")
            Me.columnToAdd1 = Me.Columns("ToAdd1")
            Me.columnToAdd2 = Me.Columns("ToAdd2")
            Me.columnToCity = Me.Columns("ToCity")
            Me.columnToState = Me.Columns("ToState")
            Me.columnToZip = Me.Columns("ToZip")
            Me.columnToContact = Me.Columns("ToContact")
            Me.columnToPhone = Me.Columns("ToPhone")
            Me.columnToEmail = Me.Columns("ToEmail")
            Me.columnWeight = Me.Columns("Weight")
            Me.columnPieces = Me.Columns("Pieces")
            Me.columnSentBy = Me.Columns("SentBy")
            Me.columnParcelType = Me.Columns("ParcelType")
            Me.columnServiceLevel = Me.Columns("ServiceLevel")
            Me.columnSpecialHandle = Me.Columns("SpecialHandle")
            Me.columnBillType = Me.Columns("BillType")
            Me.columnBillNum = Me.Columns("BillNum")
            Me.columnDateTime = Me.Columns("DateTime")
            Me.columnRowID = Me.Columns("RowID")
            Me.columnVOID = Me.Columns("VOID")
            Me.columngToLocID = Me.Columns("gToLocID")
            Me.columngToLocName = Me.Columns("gToLocName")
            Me.columngToAdd1 = Me.Columns("gToAdd1")
            Me.columngToAdd2 = Me.Columns("gToAdd2")
            Me.columngToCity = Me.Columns("gToCity")
            Me.columngToState = Me.Columns("gToState")
            Me.columngToZip = Me.Columns("gToZip")
            Me.columngToPhone = Me.Columns("gToPhone")
            Me.columngToAddID = Me.Columns("gToAddID")
            Me.columngToCustID = Me.Columns("gToCustID")
            Me.columngDLOfficeID = Me.Columns("gDLOfficeID")
            Me.columngDLOffice = Me.Columns("gDLOffice")
            Me.columnDLOfficeID = Me.Columns("DLOfficeID")
            Me.columnDLOffice = Me.Columns("DLOffice")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvoice_No = New DataColumn("Invoice_No", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_No)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnInvoice_Date = New DataColumn("Invoice_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Date)
            Me.columnClosing_Date = New DataColumn("Closing_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClosing_Date)
            Me.columnDue_Date = New DataColumn("Due_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDue_Date)
            Me.columnTotal_Amount = New DataColumn("Total_Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal_Amount)
            Me.columnLineNum = New DataColumn("LineNum", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLineNum)
            Me.columnTranDate = New DataColumn("TranDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTranDate)
            Me.columnCharge_Code = New DataColumn("Charge_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Code)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitPrice)
            Me.columnPrefix = New DataColumn("Prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrefix)
            Me.columnQty = New DataColumn("Qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.columnSuffix = New DataColumn("Suffix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSuffix)
            Me.columnUnit = New DataColumn("Unit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnit)
            Me.columnCharge = New DataColumn("Charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge)
            Me.columnTax = New DataColumn("Tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTax)
            Me.columnPlanID = New DataColumn("PlanID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlanID)
            Me.columnMftRowID = New DataColumn("MftRowID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMftRowID)
            Me.columnMISCRowID = New DataColumn("MISCRowID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMISCRowID)
            Me.columnTrackingNum = New DataColumn("TrackingNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrackingNum)
            Me.columnRefNum = New DataColumn("RefNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefNum)
            Me.columnFromAddID = New DataColumn("FromAddID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromAddID)
            Me.columnFromCustID = New DataColumn("FromCustID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromCustID)
            Me.columnFromCustName = New DataColumn("FromCustName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromCustName)
            Me.columnFromLocID = New DataColumn("FromLocID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromLocID)
            Me.columnFromLocName = New DataColumn("FromLocName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromLocName)
            Me.columnFromAdd1 = New DataColumn("FromAdd1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromAdd1)
            Me.columnFromAdd2 = New DataColumn("FromAdd2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromAdd2)
            Me.columnFromCity = New DataColumn("FromCity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromCity)
            Me.columnFromState = New DataColumn("FromState", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromState)
            Me.columnFromZip = New DataColumn("FromZip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromZip)
            Me.columnFromContact = New DataColumn("FromContact", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromContact)
            Me.columnFromPhone = New DataColumn("FromPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromPhone)
            Me.columnFromEmail = New DataColumn("FromEmail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromEmail)
            Me.columnToAddID = New DataColumn("ToAddID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAddID)
            Me.columnToCustID = New DataColumn("ToCustID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToCustID)
            Me.columnToCustName = New DataColumn("ToCustName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToCustName)
            Me.columnToLocID = New DataColumn("ToLocID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToLocID)
            Me.columnToLocName = New DataColumn("ToLocName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToLocName)
            Me.columnToAdd1 = New DataColumn("ToAdd1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAdd1)
            Me.columnToAdd2 = New DataColumn("ToAdd2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAdd2)
            Me.columnToCity = New DataColumn("ToCity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToCity)
            Me.columnToState = New DataColumn("ToState", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToState)
            Me.columnToZip = New DataColumn("ToZip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToZip)
            Me.columnToContact = New DataColumn("ToContact", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToContact)
            Me.columnToPhone = New DataColumn("ToPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToPhone)
            Me.columnToEmail = New DataColumn("ToEmail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToEmail)
            Me.columnWeight = New DataColumn("Weight", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeight)
            Me.columnPieces = New DataColumn("Pieces", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPieces)
            Me.columnSentBy = New DataColumn("SentBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSentBy)
            Me.columnParcelType = New DataColumn("ParcelType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnParcelType)
            Me.columnServiceLevel = New DataColumn("ServiceLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnServiceLevel)
            Me.columnSpecialHandle = New DataColumn("SpecialHandle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecialHandle)
            Me.columnBillType = New DataColumn("BillType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillType)
            Me.columnBillNum = New DataColumn("BillNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillNum)
            Me.columnDateTime = New DataColumn("DateTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTime)
            Me.columnRowID = New DataColumn("RowID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowID)
            Me.columnVOID = New DataColumn("VOID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVOID)
            Me.columngToLocID = New DataColumn("gToLocID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToLocID)
            Me.columngToLocName = New DataColumn("gToLocName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToLocName)
            Me.columngToAdd1 = New DataColumn("gToAdd1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToAdd1)
            Me.columngToAdd2 = New DataColumn("gToAdd2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToAdd2)
            Me.columngToCity = New DataColumn("gToCity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToCity)
            Me.columngToState = New DataColumn("gToState", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToState)
            Me.columngToZip = New DataColumn("gToZip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToZip)
            Me.columngToPhone = New DataColumn("gToPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToPhone)
            Me.columngToAddID = New DataColumn("gToAddID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToAddID)
            Me.columngToCustID = New DataColumn("gToCustID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngToCustID)
            Me.columngDLOfficeID = New DataColumn("gDLOfficeID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngDLOfficeID)
            Me.columngDLOffice = New DataColumn("gDLOffice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngDLOffice)
            Me.columnDLOfficeID = New DataColumn("DLOfficeID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDLOfficeID)
            Me.columnDLOffice = New DataColumn("DLOffice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDLOffice)
            Me.columnInvoice_No.AllowDBNull = false
            Me.columnCustomerID.AllowDBNull = false
            Me.columnName.AllowDBNull = false
            Me.columnInvoice_Date.AllowDBNull = false
            Me.columnTotal_Amount.AllowDBNull = false
            Me.columnLineNum.AllowDBNull = false
            Me.columnDescription.AllowDBNull = false
            Me.columnPrefix.AllowDBNull = false
            Me.columnSuffix.AllowDBNull = false
            Me.columnUnit.AllowDBNull = false
            Me.columnTax.AllowDBNull = false
            Me.columnPlanID.AllowDBNull = false
        End Sub
        
        Public Function NewInvoiceDetailsViewRow() As InvoiceDetailsViewRow
            Return CType(Me.NewRow,InvoiceDetailsViewRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InvoiceDetailsViewRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InvoiceDetailsViewRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InvoiceDetailsViewRowChangedEvent) Is Nothing) Then
                RaiseEvent InvoiceDetailsViewRowChanged(Me, New InvoiceDetailsViewRowChangeEvent(CType(e.Row,InvoiceDetailsViewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InvoiceDetailsViewRowChangingEvent) Is Nothing) Then
                RaiseEvent InvoiceDetailsViewRowChanging(Me, New InvoiceDetailsViewRowChangeEvent(CType(e.Row,InvoiceDetailsViewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InvoiceDetailsViewRowDeletedEvent) Is Nothing) Then
                RaiseEvent InvoiceDetailsViewRowDeleted(Me, New InvoiceDetailsViewRowChangeEvent(CType(e.Row,InvoiceDetailsViewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InvoiceDetailsViewRowDeletingEvent) Is Nothing) Then
                RaiseEvent InvoiceDetailsViewRowDeleting(Me, New InvoiceDetailsViewRowChangeEvent(CType(e.Row,InvoiceDetailsViewRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInvoiceDetailsViewRow(ByVal row As InvoiceDetailsViewRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InvoiceDetailsViewRow
        Inherits DataRow
        
        Private tableInvoiceDetailsView As InvoiceDetailsViewDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInvoiceDetailsView = CType(Me.Table,InvoiceDetailsViewDataTable)
        End Sub
        
        Public Property Invoice_No As Integer
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.Invoice_NoColumn),Integer)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.Invoice_NoColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As String
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.CustomerIDColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.NameColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.NameColumn) = value
            End Set
        End Property
        
        Public Property Invoice_Date As Date
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.Invoice_DateColumn),Date)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.Invoice_DateColumn) = value
            End Set
        End Property
        
        Public Property Closing_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.Closing_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.Closing_DateColumn) = value
            End Set
        End Property
        
        Public Property Due_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.Due_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.Due_DateColumn) = value
            End Set
        End Property
        
        Public Property Total_Amount As Decimal
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.Total_AmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.Total_AmountColumn) = value
            End Set
        End Property
        
        Public Property LineNum As Integer
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.LineNumColumn),Integer)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.LineNumColumn) = value
            End Set
        End Property
        
        Public Property TranDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.TranDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.TranDateColumn) = value
            End Set
        End Property
        
        Public Property Charge_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.Charge_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.Charge_CodeColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.UnitPriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Property Prefix As String
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.PrefixColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.PrefixColumn) = value
            End Set
        End Property
        
        Public Property Qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.QtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.QtyColumn) = value
            End Set
        End Property
        
        Public Property Suffix As String
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.SuffixColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.SuffixColumn) = value
            End Set
        End Property
        
        Public Property Unit As String
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.UnitColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.UnitColumn) = value
            End Set
        End Property
        
        Public Property Charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ChargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ChargeColumn) = value
            End Set
        End Property
        
        Public Property Tax As String
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.TaxColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.TaxColumn) = value
            End Set
        End Property
        
        Public Property PlanID As Integer
            Get
                Return CType(Me(Me.tableInvoiceDetailsView.PlanIDColumn),Integer)
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.PlanIDColumn) = value
            End Set
        End Property
        
        Public Property MftRowID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.MftRowIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.MftRowIDColumn) = value
            End Set
        End Property
        
        Public Property MISCRowID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.MISCRowIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.MISCRowIDColumn) = value
            End Set
        End Property
        
        Public Property TrackingNum As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.TrackingNumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.TrackingNumColumn) = value
            End Set
        End Property
        
        Public Property RefNum As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.RefNumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.RefNumColumn) = value
            End Set
        End Property
        
        Public Property FromAddID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromAddIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromAddIDColumn) = value
            End Set
        End Property
        
        Public Property FromCustID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromCustIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromCustIDColumn) = value
            End Set
        End Property
        
        Public Property FromCustName As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromCustNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromCustNameColumn) = value
            End Set
        End Property
        
        Public Property FromLocID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromLocIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromLocIDColumn) = value
            End Set
        End Property
        
        Public Property FromLocName As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromLocNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromLocNameColumn) = value
            End Set
        End Property
        
        Public Property FromAdd1 As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromAdd1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromAdd1Column) = value
            End Set
        End Property
        
        Public Property FromAdd2 As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromAdd2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromAdd2Column) = value
            End Set
        End Property
        
        Public Property FromCity As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromCityColumn) = value
            End Set
        End Property
        
        Public Property FromState As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromStateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromStateColumn) = value
            End Set
        End Property
        
        Public Property FromZip As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromZipColumn) = value
            End Set
        End Property
        
        Public Property FromContact As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromContactColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromContactColumn) = value
            End Set
        End Property
        
        Public Property FromPhone As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromPhoneColumn) = value
            End Set
        End Property
        
        Public Property FromEmail As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.FromEmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.FromEmailColumn) = value
            End Set
        End Property
        
        Public Property ToAddID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToAddIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToAddIDColumn) = value
            End Set
        End Property
        
        Public Property ToCustID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToCustIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToCustIDColumn) = value
            End Set
        End Property
        
        Public Property ToCustName As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToCustNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToCustNameColumn) = value
            End Set
        End Property
        
        Public Property ToLocID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToLocIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToLocIDColumn) = value
            End Set
        End Property
        
        Public Property ToLocName As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToLocNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToLocNameColumn) = value
            End Set
        End Property
        
        Public Property ToAdd1 As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToAdd1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToAdd1Column) = value
            End Set
        End Property
        
        Public Property ToAdd2 As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToAdd2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToAdd2Column) = value
            End Set
        End Property
        
        Public Property ToCity As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToCityColumn) = value
            End Set
        End Property
        
        Public Property ToState As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToStateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToStateColumn) = value
            End Set
        End Property
        
        Public Property ToZip As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToZipColumn) = value
            End Set
        End Property
        
        Public Property ToContact As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToContactColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToContactColumn) = value
            End Set
        End Property
        
        Public Property ToPhone As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToPhoneColumn) = value
            End Set
        End Property
        
        Public Property ToEmail As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ToEmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ToEmailColumn) = value
            End Set
        End Property
        
        Public Property Weight As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.WeightColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.WeightColumn) = value
            End Set
        End Property
        
        Public Property Pieces As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.PiecesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.PiecesColumn) = value
            End Set
        End Property
        
        Public Property SentBy As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.SentByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.SentByColumn) = value
            End Set
        End Property
        
        Public Property ParcelType As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ParcelTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ParcelTypeColumn) = value
            End Set
        End Property
        
        Public Property ServiceLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.ServiceLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.ServiceLevelColumn) = value
            End Set
        End Property
        
        Public Property SpecialHandle As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.SpecialHandleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.SpecialHandleColumn) = value
            End Set
        End Property
        
        Public Property BillType As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.BillTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.BillTypeColumn) = value
            End Set
        End Property
        
        Public Property BillNum As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.BillNumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.BillNumColumn) = value
            End Set
        End Property
        
        Public Property DateTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.DateTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.DateTimeColumn) = value
            End Set
        End Property
        
        Public Property RowID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.RowIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.RowIDColumn) = value
            End Set
        End Property
        
        Public Property VOID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.VOIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.VOIDColumn) = value
            End Set
        End Property
        
        Public Property gToLocID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToLocIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToLocIDColumn) = value
            End Set
        End Property
        
        Public Property gToLocName As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToLocNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToLocNameColumn) = value
            End Set
        End Property
        
        Public Property gToAdd1 As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToAdd1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToAdd1Column) = value
            End Set
        End Property
        
        Public Property gToAdd2 As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToAdd2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToAdd2Column) = value
            End Set
        End Property
        
        Public Property gToCity As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToCityColumn) = value
            End Set
        End Property
        
        Public Property gToState As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToStateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToStateColumn) = value
            End Set
        End Property
        
        Public Property gToZip As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToZipColumn) = value
            End Set
        End Property
        
        Public Property gToPhone As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToPhoneColumn) = value
            End Set
        End Property
        
        Public Property gToAddID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToAddIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToAddIDColumn) = value
            End Set
        End Property
        
        Public Property gToCustID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gToCustIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gToCustIDColumn) = value
            End Set
        End Property
        
        Public Property gDLOfficeID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gDLOfficeIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gDLOfficeIDColumn) = value
            End Set
        End Property
        
        Public Property gDLOffice As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.gDLOfficeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.gDLOfficeColumn) = value
            End Set
        End Property
        
        Public Property DLOfficeID As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.DLOfficeIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.DLOfficeIDColumn) = value
            End Set
        End Property
        
        Public Property DLOffice As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceDetailsView.DLOfficeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceDetailsView.DLOfficeColumn) = value
            End Set
        End Property
        
        Public Function IsClosing_DateNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.Closing_DateColumn)
        End Function
        
        Public Sub SetClosing_DateNull()
            Me(Me.tableInvoiceDetailsView.Closing_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDue_DateNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.Due_DateColumn)
        End Function
        
        Public Sub SetDue_DateNull()
            Me(Me.tableInvoiceDetailsView.Due_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTranDateNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.TranDateColumn)
        End Function
        
        Public Sub SetTranDateNull()
            Me(Me.tableInvoiceDetailsView.TranDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CodeNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.Charge_CodeColumn)
        End Function
        
        Public Sub SetCharge_CodeNull()
            Me(Me.tableInvoiceDetailsView.Charge_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.UnitPriceColumn)
        End Function
        
        Public Sub SetUnitPriceNull()
            Me(Me.tableInvoiceDetailsView.UnitPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableInvoiceDetailsView.QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChargeNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ChargeColumn)
        End Function
        
        Public Sub SetChargeNull()
            Me(Me.tableInvoiceDetailsView.ChargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMftRowIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.MftRowIDColumn)
        End Function
        
        Public Sub SetMftRowIDNull()
            Me(Me.tableInvoiceDetailsView.MftRowIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMISCRowIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.MISCRowIDColumn)
        End Function
        
        Public Sub SetMISCRowIDNull()
            Me(Me.tableInvoiceDetailsView.MISCRowIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTrackingNumNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.TrackingNumColumn)
        End Function
        
        Public Sub SetTrackingNumNull()
            Me(Me.tableInvoiceDetailsView.TrackingNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefNumNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.RefNumColumn)
        End Function
        
        Public Sub SetRefNumNull()
            Me(Me.tableInvoiceDetailsView.RefNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromAddIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromAddIDColumn)
        End Function
        
        Public Sub SetFromAddIDNull()
            Me(Me.tableInvoiceDetailsView.FromAddIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromCustIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromCustIDColumn)
        End Function
        
        Public Sub SetFromCustIDNull()
            Me(Me.tableInvoiceDetailsView.FromCustIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromCustNameNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromCustNameColumn)
        End Function
        
        Public Sub SetFromCustNameNull()
            Me(Me.tableInvoiceDetailsView.FromCustNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromLocIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromLocIDColumn)
        End Function
        
        Public Sub SetFromLocIDNull()
            Me(Me.tableInvoiceDetailsView.FromLocIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromLocNameNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromLocNameColumn)
        End Function
        
        Public Sub SetFromLocNameNull()
            Me(Me.tableInvoiceDetailsView.FromLocNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromAdd1Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromAdd1Column)
        End Function
        
        Public Sub SetFromAdd1Null()
            Me(Me.tableInvoiceDetailsView.FromAdd1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromAdd2Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromAdd2Column)
        End Function
        
        Public Sub SetFromAdd2Null()
            Me(Me.tableInvoiceDetailsView.FromAdd2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromCityNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromCityColumn)
        End Function
        
        Public Sub SetFromCityNull()
            Me(Me.tableInvoiceDetailsView.FromCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromStateNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromStateColumn)
        End Function
        
        Public Sub SetFromStateNull()
            Me(Me.tableInvoiceDetailsView.FromStateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromZipNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromZipColumn)
        End Function
        
        Public Sub SetFromZipNull()
            Me(Me.tableInvoiceDetailsView.FromZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromContactNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromContactColumn)
        End Function
        
        Public Sub SetFromContactNull()
            Me(Me.tableInvoiceDetailsView.FromContactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromPhoneNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromPhoneColumn)
        End Function
        
        Public Sub SetFromPhoneNull()
            Me(Me.tableInvoiceDetailsView.FromPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromEmailNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.FromEmailColumn)
        End Function
        
        Public Sub SetFromEmailNull()
            Me(Me.tableInvoiceDetailsView.FromEmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAddIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToAddIDColumn)
        End Function
        
        Public Sub SetToAddIDNull()
            Me(Me.tableInvoiceDetailsView.ToAddIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToCustIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToCustIDColumn)
        End Function
        
        Public Sub SetToCustIDNull()
            Me(Me.tableInvoiceDetailsView.ToCustIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToCustNameNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToCustNameColumn)
        End Function
        
        Public Sub SetToCustNameNull()
            Me(Me.tableInvoiceDetailsView.ToCustNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToLocIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToLocIDColumn)
        End Function
        
        Public Sub SetToLocIDNull()
            Me(Me.tableInvoiceDetailsView.ToLocIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToLocNameNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToLocNameColumn)
        End Function
        
        Public Sub SetToLocNameNull()
            Me(Me.tableInvoiceDetailsView.ToLocNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAdd1Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToAdd1Column)
        End Function
        
        Public Sub SetToAdd1Null()
            Me(Me.tableInvoiceDetailsView.ToAdd1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAdd2Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToAdd2Column)
        End Function
        
        Public Sub SetToAdd2Null()
            Me(Me.tableInvoiceDetailsView.ToAdd2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsToCityNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToCityColumn)
        End Function
        
        Public Sub SetToCityNull()
            Me(Me.tableInvoiceDetailsView.ToCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToStateNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToStateColumn)
        End Function
        
        Public Sub SetToStateNull()
            Me(Me.tableInvoiceDetailsView.ToStateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToZipNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToZipColumn)
        End Function
        
        Public Sub SetToZipNull()
            Me(Me.tableInvoiceDetailsView.ToZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToContactNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToContactColumn)
        End Function
        
        Public Sub SetToContactNull()
            Me(Me.tableInvoiceDetailsView.ToContactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToPhoneNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToPhoneColumn)
        End Function
        
        Public Sub SetToPhoneNull()
            Me(Me.tableInvoiceDetailsView.ToPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToEmailNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ToEmailColumn)
        End Function
        
        Public Sub SetToEmailNull()
            Me(Me.tableInvoiceDetailsView.ToEmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.WeightColumn)
        End Function
        
        Public Sub SetWeightNull()
            Me(Me.tableInvoiceDetailsView.WeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPiecesNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.PiecesColumn)
        End Function
        
        Public Sub SetPiecesNull()
            Me(Me.tableInvoiceDetailsView.PiecesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSentByNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.SentByColumn)
        End Function
        
        Public Sub SetSentByNull()
            Me(Me.tableInvoiceDetailsView.SentByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsParcelTypeNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ParcelTypeColumn)
        End Function
        
        Public Sub SetParcelTypeNull()
            Me(Me.tableInvoiceDetailsView.ParcelTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsServiceLevelNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.ServiceLevelColumn)
        End Function
        
        Public Sub SetServiceLevelNull()
            Me(Me.tableInvoiceDetailsView.ServiceLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecialHandleNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.SpecialHandleColumn)
        End Function
        
        Public Sub SetSpecialHandleNull()
            Me(Me.tableInvoiceDetailsView.SpecialHandleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillTypeNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.BillTypeColumn)
        End Function
        
        Public Sub SetBillTypeNull()
            Me(Me.tableInvoiceDetailsView.BillTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillNumNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.BillNumColumn)
        End Function
        
        Public Sub SetBillNumNull()
            Me(Me.tableInvoiceDetailsView.BillNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.DateTimeColumn)
        End Function
        
        Public Sub SetDateTimeNull()
            Me(Me.tableInvoiceDetailsView.DateTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRowIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.RowIDColumn)
        End Function
        
        Public Sub SetRowIDNull()
            Me(Me.tableInvoiceDetailsView.RowIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVOIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.VOIDColumn)
        End Function
        
        Public Sub SetVOIDNull()
            Me(Me.tableInvoiceDetailsView.VOIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToLocIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToLocIDColumn)
        End Function
        
        Public Sub SetgToLocIDNull()
            Me(Me.tableInvoiceDetailsView.gToLocIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToLocNameNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToLocNameColumn)
        End Function
        
        Public Sub SetgToLocNameNull()
            Me(Me.tableInvoiceDetailsView.gToLocNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToAdd1Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToAdd1Column)
        End Function
        
        Public Sub SetgToAdd1Null()
            Me(Me.tableInvoiceDetailsView.gToAdd1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToAdd2Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToAdd2Column)
        End Function
        
        Public Sub SetgToAdd2Null()
            Me(Me.tableInvoiceDetailsView.gToAdd2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToCityNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToCityColumn)
        End Function
        
        Public Sub SetgToCityNull()
            Me(Me.tableInvoiceDetailsView.gToCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToStateNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToStateColumn)
        End Function
        
        Public Sub SetgToStateNull()
            Me(Me.tableInvoiceDetailsView.gToStateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToZipNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToZipColumn)
        End Function
        
        Public Sub SetgToZipNull()
            Me(Me.tableInvoiceDetailsView.gToZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToPhoneNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToPhoneColumn)
        End Function
        
        Public Sub SetgToPhoneNull()
            Me(Me.tableInvoiceDetailsView.gToPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToAddIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToAddIDColumn)
        End Function
        
        Public Sub SetgToAddIDNull()
            Me(Me.tableInvoiceDetailsView.gToAddIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgToCustIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gToCustIDColumn)
        End Function
        
        Public Sub SetgToCustIDNull()
            Me(Me.tableInvoiceDetailsView.gToCustIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgDLOfficeIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gDLOfficeIDColumn)
        End Function
        
        Public Sub SetgDLOfficeIDNull()
            Me(Me.tableInvoiceDetailsView.gDLOfficeIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgDLOfficeNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.gDLOfficeColumn)
        End Function
        
        Public Sub SetgDLOfficeNull()
            Me(Me.tableInvoiceDetailsView.gDLOfficeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDLOfficeIDNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.DLOfficeIDColumn)
        End Function
        
        Public Sub SetDLOfficeIDNull()
            Me(Me.tableInvoiceDetailsView.DLOfficeIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDLOfficeNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceDetailsView.DLOfficeColumn)
        End Function
        
        Public Sub SetDLOfficeNull()
            Me(Me.tableInvoiceDetailsView.DLOfficeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InvoiceDetailsViewRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InvoiceDetailsViewRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InvoiceDetailsViewRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InvoiceDetailsViewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
