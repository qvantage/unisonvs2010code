'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset1
    Inherits DataSet
    
    Private tableResponseReportView As ResponseReportViewDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ResponseReportView")) Is Nothing) Then
                Me.Tables.Add(New ResponseReportViewDataTable(ds.Tables("ResponseReportView")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ResponseReportView As ResponseReportViewDataTable
        Get
            Return Me.tableResponseReportView
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset1 = CType(MyBase.Clone,Dataset1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ResponseReportView")) Is Nothing) Then
            Me.Tables.Add(New ResponseReportViewDataTable(ds.Tables("ResponseReportView")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableResponseReportView = CType(Me.Tables("ResponseReportView"),ResponseReportViewDataTable)
        If (Not (Me.tableResponseReportView) Is Nothing) Then
            Me.tableResponseReportView.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableResponseReportView = New ResponseReportViewDataTable
        Me.Tables.Add(Me.tableResponseReportView)
    End Sub
    
    Private Function ShouldSerializeResponseReportView() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ResponseReportViewRowChangeEventHandler(ByVal sender As Object, ByVal e As ResponseReportViewRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResponseReportViewDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnFormatID As DataColumn
        
        Private columnHDate As DataColumn
        
        Private columnAccountID As DataColumn
        
        Private columnAccountName As DataColumn
        
        Private columnResponded As DataColumn
        
        Private columnRespDate As DataColumn
        
        Private columnNeedService As DataColumn
        
        Private columnNoService As DataColumn
        
        Private columnRespOperID As DataColumn
        
        Private columnRemarks As DataColumn
        
        Private columnNoticeFmtID As DataColumn
        
        Private columnNotice_Format As DataColumn
        
        Private columnFileName As DataColumn
        
        Private columnCharge As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnHoliday_Type As DataColumn
        
        Private columnHolidayCommentsMn As DataColumn
        
        Private columnActive As DataColumn
        
        Friend Sub New()
            MyBase.New("ResponseReportView")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property FormatIDColumn As DataColumn
            Get
                Return Me.columnFormatID
            End Get
        End Property
        
        Friend ReadOnly Property HDateColumn As DataColumn
            Get
                Return Me.columnHDate
            End Get
        End Property
        
        Friend ReadOnly Property AccountIDColumn As DataColumn
            Get
                Return Me.columnAccountID
            End Get
        End Property
        
        Friend ReadOnly Property AccountNameColumn As DataColumn
            Get
                Return Me.columnAccountName
            End Get
        End Property
        
        Friend ReadOnly Property RespondedColumn As DataColumn
            Get
                Return Me.columnResponded
            End Get
        End Property
        
        Friend ReadOnly Property RespDateColumn As DataColumn
            Get
                Return Me.columnRespDate
            End Get
        End Property
        
        Friend ReadOnly Property NeedServiceColumn As DataColumn
            Get
                Return Me.columnNeedService
            End Get
        End Property
        
        Friend ReadOnly Property NoServiceColumn As DataColumn
            Get
                Return Me.columnNoService
            End Get
        End Property
        
        Friend ReadOnly Property RespOperIDColumn As DataColumn
            Get
                Return Me.columnRespOperID
            End Get
        End Property
        
        Friend ReadOnly Property RemarksColumn As DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        Friend ReadOnly Property NoticeFmtIDColumn As DataColumn
            Get
                Return Me.columnNoticeFmtID
            End Get
        End Property
        
        Friend ReadOnly Property Notice_FormatColumn As DataColumn
            Get
                Return Me.columnNotice_Format
            End Get
        End Property
        
        Friend ReadOnly Property FileNameColumn As DataColumn
            Get
                Return Me.columnFileName
            End Get
        End Property
        
        Friend ReadOnly Property ChargeColumn As DataColumn
            Get
                Return Me.columnCharge
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property Holiday_TypeColumn As DataColumn
            Get
                Return Me.columnHoliday_Type
            End Get
        End Property
        
        Friend ReadOnly Property HolidayCommentsMnColumn As DataColumn
            Get
                Return Me.columnHolidayCommentsMn
            End Get
        End Property
        
        Friend ReadOnly Property ActiveColumn As DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResponseReportViewRow
            Get
                Return CType(Me.Rows(index),ResponseReportViewRow)
            End Get
        End Property
        
        Public Event ResponseReportViewRowChanged As ResponseReportViewRowChangeEventHandler
        
        Public Event ResponseReportViewRowChanging As ResponseReportViewRowChangeEventHandler
        
        Public Event ResponseReportViewRowDeleted As ResponseReportViewRowChangeEventHandler
        
        Public Event ResponseReportViewRowDeleting As ResponseReportViewRowChangeEventHandler
        
        Public Overloads Sub AddResponseReportViewRow(ByVal row As ResponseReportViewRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddResponseReportViewRow( _
                    ByVal FormatID As Integer,  _
                    ByVal HDate As Date,  _
                    ByVal AccountID As Integer,  _
                    ByVal AccountName As String,  _
                    ByVal Responded As Boolean,  _
                    ByVal RespDate As Date,  _
                    ByVal NeedService As Boolean,  _
                    ByVal NoService As Boolean,  _
                    ByVal RespOperID As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal Notice_Format As String,  _
                    ByVal FileName As String,  _
                    ByVal Charge As Decimal,  _
                    ByVal Description As String,  _
                    ByVal Holiday_Type As Short,  _
                    ByVal HolidayCommentsMn As String,  _
                    ByVal Active As Boolean) As ResponseReportViewRow
            Dim rowResponseReportViewRow As ResponseReportViewRow = CType(Me.NewRow,ResponseReportViewRow)
            rowResponseReportViewRow.ItemArray = New Object() {Nothing, FormatID, HDate, AccountID, AccountName, Responded, RespDate, NeedService, NoService, RespOperID, Remarks, Nothing, Notice_Format, FileName, Charge, Description, Holiday_Type, HolidayCommentsMn, Active}
            Me.Rows.Add(rowResponseReportViewRow)
            Return rowResponseReportViewRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ResponseReportViewDataTable = CType(MyBase.Clone,ResponseReportViewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ResponseReportViewDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnFormatID = Me.Columns("FormatID")
            Me.columnHDate = Me.Columns("HDate")
            Me.columnAccountID = Me.Columns("AccountID")
            Me.columnAccountName = Me.Columns("AccountName")
            Me.columnResponded = Me.Columns("Responded")
            Me.columnRespDate = Me.Columns("RespDate")
            Me.columnNeedService = Me.Columns("NeedService")
            Me.columnNoService = Me.Columns("NoService")
            Me.columnRespOperID = Me.Columns("RespOperID")
            Me.columnRemarks = Me.Columns("Remarks")
            Me.columnNoticeFmtID = Me.Columns("NoticeFmtID")
            Me.columnNotice_Format = Me.Columns("Notice_Format")
            Me.columnFileName = Me.Columns("FileName")
            Me.columnCharge = Me.Columns("Charge")
            Me.columnDescription = Me.Columns("Description")
            Me.columnHoliday_Type = Me.Columns("Holiday_Type")
            Me.columnHolidayCommentsMn = Me.Columns("HolidayCommentsMn")
            Me.columnActive = Me.Columns("Active")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnFormatID = New DataColumn("FormatID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormatID)
            Me.columnHDate = New DataColumn("HDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDate)
            Me.columnAccountID = New DataColumn("AccountID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccountID)
            Me.columnAccountName = New DataColumn("AccountName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccountName)
            Me.columnResponded = New DataColumn("Responded", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResponded)
            Me.columnRespDate = New DataColumn("RespDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRespDate)
            Me.columnNeedService = New DataColumn("NeedService", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNeedService)
            Me.columnNoService = New DataColumn("NoService", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoService)
            Me.columnRespOperID = New DataColumn("RespOperID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRespOperID)
            Me.columnRemarks = New DataColumn("Remarks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemarks)
            Me.columnNoticeFmtID = New DataColumn("NoticeFmtID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoticeFmtID)
            Me.columnNotice_Format = New DataColumn("Notice_Format", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotice_Format)
            Me.columnFileName = New DataColumn("FileName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFileName)
            Me.columnCharge = New DataColumn("Charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnHoliday_Type = New DataColumn("Holiday_Type", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoliday_Type)
            Me.columnHolidayCommentsMn = New DataColumn("HolidayCommentsMn", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHolidayCommentsMn)
            Me.columnActive = New DataColumn("Active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActive)
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnFormatID.AllowDBNull = false
            Me.columnHDate.AllowDBNull = false
            Me.columnAccountID.AllowDBNull = false
            Me.columnAccountName.AllowDBNull = false
            Me.columnResponded.AllowDBNull = false
            Me.columnNeedService.AllowDBNull = false
            Me.columnNoService.AllowDBNull = false
            Me.columnRespOperID.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnNoticeFmtID.AutoIncrement = true
            Me.columnNoticeFmtID.ReadOnly = true
        End Sub
        
        Public Function NewResponseReportViewRow() As ResponseReportViewRow
            Return CType(Me.NewRow,ResponseReportViewRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ResponseReportViewRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ResponseReportViewRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResponseReportViewRowChangedEvent) Is Nothing) Then
                RaiseEvent ResponseReportViewRowChanged(Me, New ResponseReportViewRowChangeEvent(CType(e.Row,ResponseReportViewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResponseReportViewRowChangingEvent) Is Nothing) Then
                RaiseEvent ResponseReportViewRowChanging(Me, New ResponseReportViewRowChangeEvent(CType(e.Row,ResponseReportViewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResponseReportViewRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResponseReportViewRowDeleted(Me, New ResponseReportViewRowChangeEvent(CType(e.Row,ResponseReportViewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResponseReportViewRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResponseReportViewRowDeleting(Me, New ResponseReportViewRowChangeEvent(CType(e.Row,ResponseReportViewRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveResponseReportViewRow(ByVal row As ResponseReportViewRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResponseReportViewRow
        Inherits DataRow
        
        Private tableResponseReportView As ResponseReportViewDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableResponseReportView = CType(Me.Table,ResponseReportViewDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableResponseReportView.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponseReportView.IDColumn) = value
            End Set
        End Property
        
        Public Property FormatID As Integer
            Get
                Return CType(Me(Me.tableResponseReportView.FormatIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponseReportView.FormatIDColumn) = value
            End Set
        End Property
        
        Public Property HDate As Date
            Get
                Return CType(Me(Me.tableResponseReportView.HDateColumn),Date)
            End Get
            Set
                Me(Me.tableResponseReportView.HDateColumn) = value
            End Set
        End Property
        
        Public Property AccountID As Integer
            Get
                Return CType(Me(Me.tableResponseReportView.AccountIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponseReportView.AccountIDColumn) = value
            End Set
        End Property
        
        Public Property AccountName As String
            Get
                Return CType(Me(Me.tableResponseReportView.AccountNameColumn),String)
            End Get
            Set
                Me(Me.tableResponseReportView.AccountNameColumn) = value
            End Set
        End Property
        
        Public Property Responded As Boolean
            Get
                Return CType(Me(Me.tableResponseReportView.RespondedColumn),Boolean)
            End Get
            Set
                Me(Me.tableResponseReportView.RespondedColumn) = value
            End Set
        End Property
        
        Public Property RespDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.RespDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.RespDateColumn) = value
            End Set
        End Property
        
        Public Property NeedService As Boolean
            Get
                Return CType(Me(Me.tableResponseReportView.NeedServiceColumn),Boolean)
            End Get
            Set
                Me(Me.tableResponseReportView.NeedServiceColumn) = value
            End Set
        End Property
        
        Public Property NoService As Boolean
            Get
                Return CType(Me(Me.tableResponseReportView.NoServiceColumn),Boolean)
            End Get
            Set
                Me(Me.tableResponseReportView.NoServiceColumn) = value
            End Set
        End Property
        
        Public Property RespOperID As Integer
            Get
                Return CType(Me(Me.tableResponseReportView.RespOperIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponseReportView.RespOperIDColumn) = value
            End Set
        End Property
        
        Public Property Remarks As String
            Get
                Return CType(Me(Me.tableResponseReportView.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableResponseReportView.RemarksColumn) = value
            End Set
        End Property
        
        Public Property NoticeFmtID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.NoticeFmtIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.NoticeFmtIDColumn) = value
            End Set
        End Property
        
        Public Property Notice_Format As String
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.Notice_FormatColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.Notice_FormatColumn) = value
            End Set
        End Property
        
        Public Property FileName As String
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.FileNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.FileNameColumn) = value
            End Set
        End Property
        
        Public Property Charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.ChargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.ChargeColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Holiday_Type As Short
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.Holiday_TypeColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.Holiday_TypeColumn) = value
            End Set
        End Property
        
        Public Property HolidayCommentsMn As String
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.HolidayCommentsMnColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.HolidayCommentsMnColumn) = value
            End Set
        End Property
        
        Public Property Active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableResponseReportView.ActiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponseReportView.ActiveColumn) = value
            End Set
        End Property
        
        Public Function IsRespDateNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.RespDateColumn)
        End Function
        
        Public Sub SetRespDateNull()
            Me(Me.tableResponseReportView.RespDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoticeFmtIDNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.NoticeFmtIDColumn)
        End Function
        
        Public Sub SetNoticeFmtIDNull()
            Me(Me.tableResponseReportView.NoticeFmtIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotice_FormatNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.Notice_FormatColumn)
        End Function
        
        Public Sub SetNotice_FormatNull()
            Me(Me.tableResponseReportView.Notice_FormatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFileNameNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.FileNameColumn)
        End Function
        
        Public Sub SetFileNameNull()
            Me(Me.tableResponseReportView.FileNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChargeNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.ChargeColumn)
        End Function
        
        Public Sub SetChargeNull()
            Me(Me.tableResponseReportView.ChargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableResponseReportView.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHoliday_TypeNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.Holiday_TypeColumn)
        End Function
        
        Public Sub SetHoliday_TypeNull()
            Me(Me.tableResponseReportView.Holiday_TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHolidayCommentsMnNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.HolidayCommentsMnColumn)
        End Function
        
        Public Sub SetHolidayCommentsMnNull()
            Me(Me.tableResponseReportView.HolidayCommentsMnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsActiveNull() As Boolean
            Return Me.IsNull(Me.tableResponseReportView.ActiveColumn)
        End Function
        
        Public Sub SetActiveNull()
            Me(Me.tableResponseReportView.ActiveColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResponseReportViewRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ResponseReportViewRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ResponseReportViewRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ResponseReportViewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
