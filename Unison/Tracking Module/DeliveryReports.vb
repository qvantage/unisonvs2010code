'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DeliveryReports
    Inherits DataSet
    
    Private tableBillingReport As BillingReportDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BillingReport")) Is Nothing) Then
                Me.Tables.Add(New BillingReportDataTable(ds.Tables("BillingReport")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BillingReport As BillingReportDataTable
        Get
            Return Me.tableBillingReport
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DeliveryReports = CType(MyBase.Clone,DeliveryReports)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BillingReport")) Is Nothing) Then
            Me.Tables.Add(New BillingReportDataTable(ds.Tables("BillingReport")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBillingReport = CType(Me.Tables("BillingReport"),BillingReportDataTable)
        If (Not (Me.tableBillingReport) Is Nothing) Then
            Me.tableBillingReport.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DeliveryReports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBillingReport = New BillingReportDataTable
        Me.Tables.Add(Me.tableBillingReport)
    End Sub
    
    Private Function ShouldSerializeBillingReport() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BillingReportRowChangeEventHandler(ByVal sender As Object, ByVal e As BillingReportRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BillingReportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTrackingNum As DataColumn
        
        Private columnRefNum As DataColumn
        
        Private columnFromAddID As DataColumn
        
        Private columnFromCustID As DataColumn
        
        Private columnFromCustName As DataColumn
        
        Private columnFromLocID As DataColumn
        
        Private columnFromLocName As DataColumn
        
        Private columnFromAdd1 As DataColumn
        
        Private columnFromAdd2 As DataColumn
        
        Private columnFromCity As DataColumn
        
        Private columnFromState As DataColumn
        
        Private columnFromZip As DataColumn
        
        Private columnFromContact As DataColumn
        
        Private columnFromPhone As DataColumn
        
        Private columnFromEmail As DataColumn
        
        Private columnToAddID As DataColumn
        
        Private columnToCustID As DataColumn
        
        Private columnToCustName As DataColumn
        
        Private columnToLocID As DataColumn
        
        Private columnToLocName As DataColumn
        
        Private columnToAdd1 As DataColumn
        
        Private columnToAdd2 As DataColumn
        
        Private columnToCity As DataColumn
        
        Private columnToState As DataColumn
        
        Private columnToZip As DataColumn
        
        Private columnToContact As DataColumn
        
        Private columnToPhone As DataColumn
        
        Private columnToEmail As DataColumn
        
        Private columnWeight As DataColumn
        
        Private columnPieces As DataColumn
        
        Private columnSentBy As DataColumn
        
        Private columnParcelType As DataColumn
        
        Private columnServiceLevel As DataColumn
        
        Private columnSpecialHandle As DataColumn
        
        Private columnBillType As DataColumn
        
        Private columnBillNum As DataColumn
        
        Private columnDateTime As DataColumn
        
        Private columnRowID As DataColumn
        
        Private columnVOID As DataColumn
        
        Private columnDestBranchID As DataColumn
        
        Private columnDestBranch As DataColumn
        
        Private columnDestRoute As DataColumn
        
        Friend Sub New()
            MyBase.New("BillingReport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TrackingNumColumn As DataColumn
            Get
                Return Me.columnTrackingNum
            End Get
        End Property
        
        Friend ReadOnly Property RefNumColumn As DataColumn
            Get
                Return Me.columnRefNum
            End Get
        End Property
        
        Friend ReadOnly Property FromAddIDColumn As DataColumn
            Get
                Return Me.columnFromAddID
            End Get
        End Property
        
        Friend ReadOnly Property FromCustIDColumn As DataColumn
            Get
                Return Me.columnFromCustID
            End Get
        End Property
        
        Friend ReadOnly Property FromCustNameColumn As DataColumn
            Get
                Return Me.columnFromCustName
            End Get
        End Property
        
        Friend ReadOnly Property FromLocIDColumn As DataColumn
            Get
                Return Me.columnFromLocID
            End Get
        End Property
        
        Friend ReadOnly Property FromLocNameColumn As DataColumn
            Get
                Return Me.columnFromLocName
            End Get
        End Property
        
        Friend ReadOnly Property FromAdd1Column As DataColumn
            Get
                Return Me.columnFromAdd1
            End Get
        End Property
        
        Friend ReadOnly Property FromAdd2Column As DataColumn
            Get
                Return Me.columnFromAdd2
            End Get
        End Property
        
        Friend ReadOnly Property FromCityColumn As DataColumn
            Get
                Return Me.columnFromCity
            End Get
        End Property
        
        Friend ReadOnly Property FromStateColumn As DataColumn
            Get
                Return Me.columnFromState
            End Get
        End Property
        
        Friend ReadOnly Property FromZipColumn As DataColumn
            Get
                Return Me.columnFromZip
            End Get
        End Property
        
        Friend ReadOnly Property FromContactColumn As DataColumn
            Get
                Return Me.columnFromContact
            End Get
        End Property
        
        Friend ReadOnly Property FromPhoneColumn As DataColumn
            Get
                Return Me.columnFromPhone
            End Get
        End Property
        
        Friend ReadOnly Property FromEmailColumn As DataColumn
            Get
                Return Me.columnFromEmail
            End Get
        End Property
        
        Friend ReadOnly Property ToAddIDColumn As DataColumn
            Get
                Return Me.columnToAddID
            End Get
        End Property
        
        Friend ReadOnly Property ToCustIDColumn As DataColumn
            Get
                Return Me.columnToCustID
            End Get
        End Property
        
        Friend ReadOnly Property ToCustNameColumn As DataColumn
            Get
                Return Me.columnToCustName
            End Get
        End Property
        
        Friend ReadOnly Property ToLocIDColumn As DataColumn
            Get
                Return Me.columnToLocID
            End Get
        End Property
        
        Friend ReadOnly Property ToLocNameColumn As DataColumn
            Get
                Return Me.columnToLocName
            End Get
        End Property
        
        Friend ReadOnly Property ToAdd1Column As DataColumn
            Get
                Return Me.columnToAdd1
            End Get
        End Property
        
        Friend ReadOnly Property ToAdd2Column As DataColumn
            Get
                Return Me.columnToAdd2
            End Get
        End Property
        
        Friend ReadOnly Property ToCityColumn As DataColumn
            Get
                Return Me.columnToCity
            End Get
        End Property
        
        Friend ReadOnly Property ToStateColumn As DataColumn
            Get
                Return Me.columnToState
            End Get
        End Property
        
        Friend ReadOnly Property ToZipColumn As DataColumn
            Get
                Return Me.columnToZip
            End Get
        End Property
        
        Friend ReadOnly Property ToContactColumn As DataColumn
            Get
                Return Me.columnToContact
            End Get
        End Property
        
        Friend ReadOnly Property ToPhoneColumn As DataColumn
            Get
                Return Me.columnToPhone
            End Get
        End Property
        
        Friend ReadOnly Property ToEmailColumn As DataColumn
            Get
                Return Me.columnToEmail
            End Get
        End Property
        
        Friend ReadOnly Property WeightColumn As DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        Friend ReadOnly Property PiecesColumn As DataColumn
            Get
                Return Me.columnPieces
            End Get
        End Property
        
        Friend ReadOnly Property SentByColumn As DataColumn
            Get
                Return Me.columnSentBy
            End Get
        End Property
        
        Friend ReadOnly Property ParcelTypeColumn As DataColumn
            Get
                Return Me.columnParcelType
            End Get
        End Property
        
        Friend ReadOnly Property ServiceLevelColumn As DataColumn
            Get
                Return Me.columnServiceLevel
            End Get
        End Property
        
        Friend ReadOnly Property SpecialHandleColumn As DataColumn
            Get
                Return Me.columnSpecialHandle
            End Get
        End Property
        
        Friend ReadOnly Property BillTypeColumn As DataColumn
            Get
                Return Me.columnBillType
            End Get
        End Property
        
        Friend ReadOnly Property BillNumColumn As DataColumn
            Get
                Return Me.columnBillNum
            End Get
        End Property
        
        Friend ReadOnly Property DateTimeColumn As DataColumn
            Get
                Return Me.columnDateTime
            End Get
        End Property
        
        Friend ReadOnly Property RowIDColumn As DataColumn
            Get
                Return Me.columnRowID
            End Get
        End Property
        
        Friend ReadOnly Property VOIDColumn As DataColumn
            Get
                Return Me.columnVOID
            End Get
        End Property
        
        Friend ReadOnly Property DestBranchIDColumn As DataColumn
            Get
                Return Me.columnDestBranchID
            End Get
        End Property
        
        Friend ReadOnly Property DestBranchColumn As DataColumn
            Get
                Return Me.columnDestBranch
            End Get
        End Property
        
        Friend ReadOnly Property DestRouteColumn As DataColumn
            Get
                Return Me.columnDestRoute
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BillingReportRow
            Get
                Return CType(Me.Rows(index),BillingReportRow)
            End Get
        End Property
        
        Public Event BillingReportRowChanged As BillingReportRowChangeEventHandler
        
        Public Event BillingReportRowChanging As BillingReportRowChangeEventHandler
        
        Public Event BillingReportRowDeleted As BillingReportRowChangeEventHandler
        
        Public Event BillingReportRowDeleting As BillingReportRowChangeEventHandler
        
        Public Overloads Sub AddBillingReportRow(ByVal row As BillingReportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBillingReportRow( _
                    ByVal TrackingNum As String,  _
                    ByVal RefNum As String,  _
                    ByVal FromAddID As Integer,  _
                    ByVal FromCustID As String,  _
                    ByVal FromCustName As String,  _
                    ByVal FromLocID As String,  _
                    ByVal FromLocName As String,  _
                    ByVal FromAdd1 As String,  _
                    ByVal FromAdd2 As String,  _
                    ByVal FromCity As String,  _
                    ByVal FromState As String,  _
                    ByVal FromZip As String,  _
                    ByVal FromContact As String,  _
                    ByVal FromPhone As String,  _
                    ByVal FromEmail As String,  _
                    ByVal ToAddID As Integer,  _
                    ByVal ToCustID As String,  _
                    ByVal ToCustName As String,  _
                    ByVal ToLocID As String,  _
                    ByVal ToLocName As String,  _
                    ByVal ToAdd1 As String,  _
                    ByVal ToAdd2 As String,  _
                    ByVal ToCity As String,  _
                    ByVal ToState As String,  _
                    ByVal ToZip As String,  _
                    ByVal ToContact As String,  _
                    ByVal ToPhone As String,  _
                    ByVal ToEmail As String,  _
                    ByVal Weight As Decimal,  _
                    ByVal Pieces As String,  _
                    ByVal SentBy As String,  _
                    ByVal ParcelType As String,  _
                    ByVal ServiceLevel As String,  _
                    ByVal SpecialHandle As String,  _
                    ByVal BillType As String,  _
                    ByVal BillNum As String,  _
                    ByVal DateTime As Date,  _
                    ByVal RowID As String,  _
                    ByVal VOID As String,  _
                    ByVal DestBranchID As String,  _
                    ByVal DestBranch As String,  _
                    ByVal DestRoute As String) As BillingReportRow
            Dim rowBillingReportRow As BillingReportRow = CType(Me.NewRow,BillingReportRow)
            rowBillingReportRow.ItemArray = New Object() {TrackingNum, RefNum, FromAddID, FromCustID, FromCustName, FromLocID, FromLocName, FromAdd1, FromAdd2, FromCity, FromState, FromZip, FromContact, FromPhone, FromEmail, ToAddID, ToCustID, ToCustName, ToLocID, ToLocName, ToAdd1, ToAdd2, ToCity, ToState, ToZip, ToContact, ToPhone, ToEmail, Weight, Pieces, SentBy, ParcelType, ServiceLevel, SpecialHandle, BillType, BillNum, DateTime, RowID, VOID, DestBranchID, DestBranch, DestRoute}
            Me.Rows.Add(rowBillingReportRow)
            Return rowBillingReportRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BillingReportDataTable = CType(MyBase.Clone,BillingReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BillingReportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTrackingNum = Me.Columns("TrackingNum")
            Me.columnRefNum = Me.Columns("RefNum")
            Me.columnFromAddID = Me.Columns("FromAddID")
            Me.columnFromCustID = Me.Columns("FromCustID")
            Me.columnFromCustName = Me.Columns("FromCustName")
            Me.columnFromLocID = Me.Columns("FromLocID")
            Me.columnFromLocName = Me.Columns("FromLocName")
            Me.columnFromAdd1 = Me.Columns("FromAdd1")
            Me.columnFromAdd2 = Me.Columns("FromAdd2")
            Me.columnFromCity = Me.Columns("FromCity")
            Me.columnFromState = Me.Columns("FromState")
            Me.columnFromZip = Me.Columns("FromZip")
            Me.columnFromContact = Me.Columns("FromContact")
            Me.columnFromPhone = Me.Columns("FromPhone")
            Me.columnFromEmail = Me.Columns("FromEmail")
            Me.columnToAddID = Me.Columns("ToAddID")
            Me.columnToCustID = Me.Columns("ToCustID")
            Me.columnToCustName = Me.Columns("ToCustName")
            Me.columnToLocID = Me.Columns("ToLocID")
            Me.columnToLocName = Me.Columns("ToLocName")
            Me.columnToAdd1 = Me.Columns("ToAdd1")
            Me.columnToAdd2 = Me.Columns("ToAdd2")
            Me.columnToCity = Me.Columns("ToCity")
            Me.columnToState = Me.Columns("ToState")
            Me.columnToZip = Me.Columns("ToZip")
            Me.columnToContact = Me.Columns("ToContact")
            Me.columnToPhone = Me.Columns("ToPhone")
            Me.columnToEmail = Me.Columns("ToEmail")
            Me.columnWeight = Me.Columns("Weight")
            Me.columnPieces = Me.Columns("Pieces")
            Me.columnSentBy = Me.Columns("SentBy")
            Me.columnParcelType = Me.Columns("ParcelType")
            Me.columnServiceLevel = Me.Columns("ServiceLevel")
            Me.columnSpecialHandle = Me.Columns("SpecialHandle")
            Me.columnBillType = Me.Columns("BillType")
            Me.columnBillNum = Me.Columns("BillNum")
            Me.columnDateTime = Me.Columns("DateTime")
            Me.columnRowID = Me.Columns("RowID")
            Me.columnVOID = Me.Columns("VOID")
            Me.columnDestBranchID = Me.Columns("DestBranchID")
            Me.columnDestBranch = Me.Columns("DestBranch")
            Me.columnDestRoute = Me.Columns("DestRoute")
        End Sub
        
        Private Sub InitClass()
            Me.columnTrackingNum = New DataColumn("TrackingNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrackingNum)
            Me.columnRefNum = New DataColumn("RefNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefNum)
            Me.columnFromAddID = New DataColumn("FromAddID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromAddID)
            Me.columnFromCustID = New DataColumn("FromCustID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromCustID)
            Me.columnFromCustName = New DataColumn("FromCustName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromCustName)
            Me.columnFromLocID = New DataColumn("FromLocID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromLocID)
            Me.columnFromLocName = New DataColumn("FromLocName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromLocName)
            Me.columnFromAdd1 = New DataColumn("FromAdd1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromAdd1)
            Me.columnFromAdd2 = New DataColumn("FromAdd2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromAdd2)
            Me.columnFromCity = New DataColumn("FromCity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromCity)
            Me.columnFromState = New DataColumn("FromState", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromState)
            Me.columnFromZip = New DataColumn("FromZip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromZip)
            Me.columnFromContact = New DataColumn("FromContact", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromContact)
            Me.columnFromPhone = New DataColumn("FromPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromPhone)
            Me.columnFromEmail = New DataColumn("FromEmail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromEmail)
            Me.columnToAddID = New DataColumn("ToAddID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAddID)
            Me.columnToCustID = New DataColumn("ToCustID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToCustID)
            Me.columnToCustName = New DataColumn("ToCustName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToCustName)
            Me.columnToLocID = New DataColumn("ToLocID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToLocID)
            Me.columnToLocName = New DataColumn("ToLocName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToLocName)
            Me.columnToAdd1 = New DataColumn("ToAdd1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAdd1)
            Me.columnToAdd2 = New DataColumn("ToAdd2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAdd2)
            Me.columnToCity = New DataColumn("ToCity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToCity)
            Me.columnToState = New DataColumn("ToState", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToState)
            Me.columnToZip = New DataColumn("ToZip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToZip)
            Me.columnToContact = New DataColumn("ToContact", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToContact)
            Me.columnToPhone = New DataColumn("ToPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToPhone)
            Me.columnToEmail = New DataColumn("ToEmail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToEmail)
            Me.columnWeight = New DataColumn("Weight", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeight)
            Me.columnPieces = New DataColumn("Pieces", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPieces)
            Me.columnSentBy = New DataColumn("SentBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSentBy)
            Me.columnParcelType = New DataColumn("ParcelType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnParcelType)
            Me.columnServiceLevel = New DataColumn("ServiceLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnServiceLevel)
            Me.columnSpecialHandle = New DataColumn("SpecialHandle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecialHandle)
            Me.columnBillType = New DataColumn("BillType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillType)
            Me.columnBillNum = New DataColumn("BillNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillNum)
            Me.columnDateTime = New DataColumn("DateTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTime)
            Me.columnRowID = New DataColumn("RowID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowID)
            Me.columnVOID = New DataColumn("VOID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVOID)
            Me.columnDestBranchID = New DataColumn("DestBranchID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDestBranchID)
            Me.columnDestBranch = New DataColumn("DestBranch", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDestBranch)
            Me.columnDestRoute = New DataColumn("DestRoute", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDestRoute)
            Me.columnTrackingNum.AllowDBNull = false
            Me.columnRowID.AllowDBNull = false
        End Sub
        
        Public Function NewBillingReportRow() As BillingReportRow
            Return CType(Me.NewRow,BillingReportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BillingReportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BillingReportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BillingReportRowChangedEvent) Is Nothing) Then
                RaiseEvent BillingReportRowChanged(Me, New BillingReportRowChangeEvent(CType(e.Row,BillingReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BillingReportRowChangingEvent) Is Nothing) Then
                RaiseEvent BillingReportRowChanging(Me, New BillingReportRowChangeEvent(CType(e.Row,BillingReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BillingReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent BillingReportRowDeleted(Me, New BillingReportRowChangeEvent(CType(e.Row,BillingReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BillingReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent BillingReportRowDeleting(Me, New BillingReportRowChangeEvent(CType(e.Row,BillingReportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBillingReportRow(ByVal row As BillingReportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BillingReportRow
        Inherits DataRow
        
        Private tableBillingReport As BillingReportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBillingReport = CType(Me.Table,BillingReportDataTable)
        End Sub
        
        Public Property TrackingNum As String
            Get
                Return CType(Me(Me.tableBillingReport.TrackingNumColumn),String)
            End Get
            Set
                Me(Me.tableBillingReport.TrackingNumColumn) = value
            End Set
        End Property
        
        Public Property RefNum As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.RefNumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.RefNumColumn) = value
            End Set
        End Property
        
        Public Property FromAddID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromAddIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromAddIDColumn) = value
            End Set
        End Property
        
        Public Property FromCustID As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromCustIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromCustIDColumn) = value
            End Set
        End Property
        
        Public Property FromCustName As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromCustNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromCustNameColumn) = value
            End Set
        End Property
        
        Public Property FromLocID As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromLocIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromLocIDColumn) = value
            End Set
        End Property
        
        Public Property FromLocName As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromLocNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromLocNameColumn) = value
            End Set
        End Property
        
        Public Property FromAdd1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromAdd1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromAdd1Column) = value
            End Set
        End Property
        
        Public Property FromAdd2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromAdd2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromAdd2Column) = value
            End Set
        End Property
        
        Public Property FromCity As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromCityColumn) = value
            End Set
        End Property
        
        Public Property FromState As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromStateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromStateColumn) = value
            End Set
        End Property
        
        Public Property FromZip As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromZipColumn) = value
            End Set
        End Property
        
        Public Property FromContact As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromContactColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromContactColumn) = value
            End Set
        End Property
        
        Public Property FromPhone As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromPhoneColumn) = value
            End Set
        End Property
        
        Public Property FromEmail As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.FromEmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.FromEmailColumn) = value
            End Set
        End Property
        
        Public Property ToAddID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToAddIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToAddIDColumn) = value
            End Set
        End Property
        
        Public Property ToCustID As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToCustIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToCustIDColumn) = value
            End Set
        End Property
        
        Public Property ToCustName As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToCustNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToCustNameColumn) = value
            End Set
        End Property
        
        Public Property ToLocID As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToLocIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToLocIDColumn) = value
            End Set
        End Property
        
        Public Property ToLocName As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToLocNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToLocNameColumn) = value
            End Set
        End Property
        
        Public Property ToAdd1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToAdd1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToAdd1Column) = value
            End Set
        End Property
        
        Public Property ToAdd2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToAdd2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToAdd2Column) = value
            End Set
        End Property
        
        Public Property ToCity As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToCityColumn) = value
            End Set
        End Property
        
        Public Property ToState As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToStateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToStateColumn) = value
            End Set
        End Property
        
        Public Property ToZip As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToZipColumn) = value
            End Set
        End Property
        
        Public Property ToContact As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToContactColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToContactColumn) = value
            End Set
        End Property
        
        Public Property ToPhone As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToPhoneColumn) = value
            End Set
        End Property
        
        Public Property ToEmail As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ToEmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ToEmailColumn) = value
            End Set
        End Property
        
        Public Property Weight As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.WeightColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.WeightColumn) = value
            End Set
        End Property
        
        Public Property Pieces As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.PiecesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.PiecesColumn) = value
            End Set
        End Property
        
        Public Property SentBy As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.SentByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.SentByColumn) = value
            End Set
        End Property
        
        Public Property ParcelType As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ParcelTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ParcelTypeColumn) = value
            End Set
        End Property
        
        Public Property ServiceLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.ServiceLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.ServiceLevelColumn) = value
            End Set
        End Property
        
        Public Property SpecialHandle As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.SpecialHandleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.SpecialHandleColumn) = value
            End Set
        End Property
        
        Public Property BillType As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.BillTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.BillTypeColumn) = value
            End Set
        End Property
        
        Public Property BillNum As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.BillNumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.BillNumColumn) = value
            End Set
        End Property
        
        Public Property DateTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.DateTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.DateTimeColumn) = value
            End Set
        End Property
        
        Public Property RowID As String
            Get
                Return CType(Me(Me.tableBillingReport.RowIDColumn),String)
            End Get
            Set
                Me(Me.tableBillingReport.RowIDColumn) = value
            End Set
        End Property
        
        Public Property VOID As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.VOIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.VOIDColumn) = value
            End Set
        End Property
        
        Public Property DestBranchID As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.DestBranchIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.DestBranchIDColumn) = value
            End Set
        End Property
        
        Public Property DestBranch As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.DestBranchColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.DestBranchColumn) = value
            End Set
        End Property
        
        Public Property DestRoute As String
            Get
                Try 
                    Return CType(Me(Me.tableBillingReport.DestRouteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBillingReport.DestRouteColumn) = value
            End Set
        End Property
        
        Public Function IsRefNumNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.RefNumColumn)
        End Function
        
        Public Sub SetRefNumNull()
            Me(Me.tableBillingReport.RefNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromAddIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromAddIDColumn)
        End Function
        
        Public Sub SetFromAddIDNull()
            Me(Me.tableBillingReport.FromAddIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromCustIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromCustIDColumn)
        End Function
        
        Public Sub SetFromCustIDNull()
            Me(Me.tableBillingReport.FromCustIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromCustNameNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromCustNameColumn)
        End Function
        
        Public Sub SetFromCustNameNull()
            Me(Me.tableBillingReport.FromCustNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromLocIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromLocIDColumn)
        End Function
        
        Public Sub SetFromLocIDNull()
            Me(Me.tableBillingReport.FromLocIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromLocNameNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromLocNameColumn)
        End Function
        
        Public Sub SetFromLocNameNull()
            Me(Me.tableBillingReport.FromLocNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromAdd1Null() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromAdd1Column)
        End Function
        
        Public Sub SetFromAdd1Null()
            Me(Me.tableBillingReport.FromAdd1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromAdd2Null() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromAdd2Column)
        End Function
        
        Public Sub SetFromAdd2Null()
            Me(Me.tableBillingReport.FromAdd2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromCityNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromCityColumn)
        End Function
        
        Public Sub SetFromCityNull()
            Me(Me.tableBillingReport.FromCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromStateNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromStateColumn)
        End Function
        
        Public Sub SetFromStateNull()
            Me(Me.tableBillingReport.FromStateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromZipNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromZipColumn)
        End Function
        
        Public Sub SetFromZipNull()
            Me(Me.tableBillingReport.FromZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromContactNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromContactColumn)
        End Function
        
        Public Sub SetFromContactNull()
            Me(Me.tableBillingReport.FromContactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromPhoneNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromPhoneColumn)
        End Function
        
        Public Sub SetFromPhoneNull()
            Me(Me.tableBillingReport.FromPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromEmailNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.FromEmailColumn)
        End Function
        
        Public Sub SetFromEmailNull()
            Me(Me.tableBillingReport.FromEmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAddIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToAddIDColumn)
        End Function
        
        Public Sub SetToAddIDNull()
            Me(Me.tableBillingReport.ToAddIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToCustIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToCustIDColumn)
        End Function
        
        Public Sub SetToCustIDNull()
            Me(Me.tableBillingReport.ToCustIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToCustNameNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToCustNameColumn)
        End Function
        
        Public Sub SetToCustNameNull()
            Me(Me.tableBillingReport.ToCustNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToLocIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToLocIDColumn)
        End Function
        
        Public Sub SetToLocIDNull()
            Me(Me.tableBillingReport.ToLocIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToLocNameNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToLocNameColumn)
        End Function
        
        Public Sub SetToLocNameNull()
            Me(Me.tableBillingReport.ToLocNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAdd1Null() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToAdd1Column)
        End Function
        
        Public Sub SetToAdd1Null()
            Me(Me.tableBillingReport.ToAdd1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAdd2Null() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToAdd2Column)
        End Function
        
        Public Sub SetToAdd2Null()
            Me(Me.tableBillingReport.ToAdd2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsToCityNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToCityColumn)
        End Function
        
        Public Sub SetToCityNull()
            Me(Me.tableBillingReport.ToCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToStateNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToStateColumn)
        End Function
        
        Public Sub SetToStateNull()
            Me(Me.tableBillingReport.ToStateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToZipNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToZipColumn)
        End Function
        
        Public Sub SetToZipNull()
            Me(Me.tableBillingReport.ToZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToContactNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToContactColumn)
        End Function
        
        Public Sub SetToContactNull()
            Me(Me.tableBillingReport.ToContactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToPhoneNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToPhoneColumn)
        End Function
        
        Public Sub SetToPhoneNull()
            Me(Me.tableBillingReport.ToPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToEmailNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ToEmailColumn)
        End Function
        
        Public Sub SetToEmailNull()
            Me(Me.tableBillingReport.ToEmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.WeightColumn)
        End Function
        
        Public Sub SetWeightNull()
            Me(Me.tableBillingReport.WeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPiecesNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.PiecesColumn)
        End Function
        
        Public Sub SetPiecesNull()
            Me(Me.tableBillingReport.PiecesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSentByNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.SentByColumn)
        End Function
        
        Public Sub SetSentByNull()
            Me(Me.tableBillingReport.SentByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsParcelTypeNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ParcelTypeColumn)
        End Function
        
        Public Sub SetParcelTypeNull()
            Me(Me.tableBillingReport.ParcelTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsServiceLevelNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.ServiceLevelColumn)
        End Function
        
        Public Sub SetServiceLevelNull()
            Me(Me.tableBillingReport.ServiceLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecialHandleNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.SpecialHandleColumn)
        End Function
        
        Public Sub SetSpecialHandleNull()
            Me(Me.tableBillingReport.SpecialHandleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillTypeNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.BillTypeColumn)
        End Function
        
        Public Sub SetBillTypeNull()
            Me(Me.tableBillingReport.BillTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillNumNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.BillNumColumn)
        End Function
        
        Public Sub SetBillNumNull()
            Me(Me.tableBillingReport.BillNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.DateTimeColumn)
        End Function
        
        Public Sub SetDateTimeNull()
            Me(Me.tableBillingReport.DateTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVOIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.VOIDColumn)
        End Function
        
        Public Sub SetVOIDNull()
            Me(Me.tableBillingReport.VOIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDestBranchIDNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.DestBranchIDColumn)
        End Function
        
        Public Sub SetDestBranchIDNull()
            Me(Me.tableBillingReport.DestBranchIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDestBranchNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.DestBranchColumn)
        End Function
        
        Public Sub SetDestBranchNull()
            Me(Me.tableBillingReport.DestBranchColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDestRouteNull() As Boolean
            Return Me.IsNull(Me.tableBillingReport.DestRouteColumn)
        End Function
        
        Public Sub SetDestRouteNull()
            Me(Me.tableBillingReport.DestRouteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BillingReportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BillingReportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BillingReportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BillingReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
